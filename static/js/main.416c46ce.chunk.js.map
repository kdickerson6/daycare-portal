{"version":3,"sources":["aubdaycare.png","Form.js","CheckInOut.js","Admin.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Form","this","props","enterClickHandler","react_default","a","createElement","lib","offset","s","m","l","label","waves","onClick","handleEnterClick","bind","Component","CheckInOut","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","checkIn","isCheckIn","className","Admin","App","displayCheckInOut","displayAdmin","setState","shouldDisplayCheckInOut","shouldDisplayAdmin","brand","right","href","handleAdminClick","src_Admin","src","Logo","alt","src_CheckInOut","src_Form","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.416c46ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/aubdaycare.aaca6e2a.png\";","import React, {Component} from 'react';\nimport {Row, Input, Col, Button} from 'react-materialize';\n\nclass Form extends Component {\n    handleEnterClick() {\n        this.props.enterClickHandler();\n    }\n\n    render() {\n        return(\n            <div>\n                <h4>Please enter your ID to check in or check out. </h4>\n                <Row>\n                    <Col offset=\"s3 m3 l4\"></Col>\n                    <Input s={6} m={6} l={4} label=\"Parent or Teacher ID\" />\n                </Row>\n                <Row>\n                    <Button waves='light' onClick={this.handleEnterClick.bind(this)}>Enter</Button>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default Form; ","import React, { Component } from 'react';\nimport { Button } from 'react-materialize';\n\nclass CheckInOut extends Component {\n    constructor(props) {\n        super(props);\n        this.state={\n            checkIn: true\n        }\n    }\n\n    render() {\n        const isCheckIn = this.state.checkIn;\n\n        return(\n            <div className=\"CheckInOut\">\n            <div>{isCheckIn ? <p>Last Check Out Time</p> : <p>Last Checkout Time </p>}</div>\n            {isCheckIn ? <Button waves='light'>CHECKIN</Button> : <Button waves='light'>CHECKOUT</Button>}\n            </div>          \n        );\n    }\n}\n\nexport default CheckInOut;","import React, { Component } from 'react';\n\nclass Admin extends Component {\n    render() {\n        return(\n            <div>admin</div>\n        );\n    }\n}\n\nexport default Admin;","import React, { Component } from 'react';\nimport {Navbar, NavItem} from 'react-materialize';\nimport Form from './Form.js';\nimport CheckInOut from './CheckInOut.js';\nimport Admin from './Admin.js';\nimport Logo from './aubdaycare.png';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayCheckInOut: false,\n      displayAdmin: false\n    }\n  }\n\n  handleEnterClick() {\n    this.setState({displayCheckInOut: true});\n  }\n\n  handleAdminClick() {\n    this.setState({displayAdmin:true});\n  }\n\n  render() {\n    const shouldDisplayCheckInOut = this.state.displayCheckInOut;\n    const shouldDisplayAdmin = this.state.displayAdmin;\n    return (\n      <div className=\"App\">\n        <nav>\n          <Navbar className=\"Nav\" brand='Day Care Portal' right>\n            <NavItem href='#'>Home</NavItem>\n            <NavItem onClick={this.handleAdminClick.bind(this)}>Admin</NavItem>\n          </Navbar>\n        </nav>\n        {shouldDisplayAdmin ? <Admin/> : \n        (\n        <div><header className=\"App-header\">\n          <img src={Logo} alt=\"\"/>\n        </header>\n        <div className=\"Form\">\n          {shouldDisplayCheckInOut ? <CheckInOut /> : <Form enterClickHandler={this.handleEnterClick.bind(this)}/>}\n        </div></div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}