{"version":3,"sources":["aubdaycare.png","Form.js","CheckInOut.js","Admin.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","id","e","setState","target","value","console","log","enterClickHandler","react_default","a","createElement","lib","offset","s","m","l","label","onChange","handleInputChange","bind","waves","onClick","Component","testPerson","require","persons","CheckInOut","checkIn","last_action","type","getLastAction","isCheckIn","className","currentId","name","time","Admin","App","displayCheckInOut","displayAdmin","idValue","shouldDisplayCheckInOut","shouldDisplayAdmin","brand","right","handleHomeClick","handleAdminClick","src_Admin","src","Logo","alt","src_CheckInOut","src_Form","handleEnterClick","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.82c81261.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/aubdaycare.aaca6e2a.png\";","import React, {Component} from 'react';\nimport {Row, Input, Col, Button} from 'react-materialize';\n\nclass Form extends Component {\n    constructor(props) {\n        super(props); \n        this.state = {\n            id: ''\n        }\n    }\n\n    handleInputChange(e){\n        this.setState({id: e.target.value});\n    }\n\n    enterClickHandler() {\n        var id = this.state.id;\n        console.log('entered id:  ', id);\n        this.props.enterClickHandler(this.state.id);\n    }\n\n    render() {\n        return(\n            <div>\n                <h4>Please enter your ID to check in or check out. </h4>\n                <Row>\n                    <Col offset=\"s3 m3 l4\"></Col>\n                    <Input s={6} m={6} l={4} label=\"Parent or Teacher ID\" onChange={this.handleInputChange.bind(this)} />\n                </Row>\n                <Row>\n                    <Button waves='light' onClick={this.enterClickHandler.bind(this)}>Enter</Button>\n                </Row>\n            </div>\n        );\n    }\n}\n\nexport default Form; ","import React, { Component } from 'react';\nimport { Button } from 'react-materialize';\n\nlet peopleData = require('./testData.json');\nlet testPerson = peopleData.persons[1];\n\nclass CheckInOut extends Component {\n    constructor(props) {\n        super(props);\n        this.state={\n            checkIn: true\n        }\n    }\n\n    getLastAction() {\n        if(testPerson.last_action.type === \"check_in\") {\n            this.setState({checkIn: true});\n        } else if(testPerson.last_action.type === \"check_out\") {\n            this.setState({checkIn: false});\n        }\n    }\n\n    render() {\n        this.getLastAction.bind(this);\n        const isCheckIn = this.state.checkIn;\n\n        // Need to be able to query firebase and get the person's last action (check in or out) and display here \n        return(\n            <div className=\"CheckInOut\">\n            <div className=\"personInfo\">\n                <h4>ID NUMBER: {this.props.currentId}</h4>\n                <h4>Name: {testPerson.name}</h4>\n            </div>\n\n            <div>{isCheckIn ? <h5>Last Check Out Time: {testPerson.last_action.time}</h5> : <h5>Last Check In Time: {testPerson.last_action.time}</h5>} </div>\n            <div>{isCheckIn ? <Button waves='light'>CHECKIN</Button> : <Button waves='light'>CHECKOUT</Button>}</div>\n            </div>          \n        );\n    }\n}\n\nexport default CheckInOut;","import React, { Component } from 'react';\n\nclass Admin extends Component {\n    render() {\n        return(\n            <div>admin</div>\n        );\n    }\n}\n\nexport default Admin;","import React, { Component } from 'react';\nimport {Navbar, NavItem} from 'react-materialize';\nimport Form from './Form.js';\nimport CheckInOut from './CheckInOut.js';\nimport Admin from './Admin.js';\nimport Logo from './aubdaycare.png';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayCheckInOut: false,\n      displayAdmin: false,\n      id:''\n    }\n  }\n\n  handleEnterClick(idValue) {\n    this.setState({displayCheckInOut: true, id:idValue});\n  }\n\n  handleAdminClick() {\n    this.setState({displayAdmin:true});\n  }\n\n  handleHomeClick() {\n    this.setState({displayCheckInOut: false, displayAdmin: false});\n  }\n\n  render() {\n    const shouldDisplayCheckInOut = this.state.displayCheckInOut;\n    const shouldDisplayAdmin = this.state.displayAdmin;\n    var id = '';\n    return (\n      <div>\n        <nav>\n          <Navbar className=\"Nav\" brand='Day Care Portal' right>\n            <NavItem onClick={this.handleHomeClick.bind(this)}>Home</NavItem>\n            <NavItem onClick={this.handleAdminClick.bind(this)}>Admin</NavItem>\n          </Navbar>\n        </nav>\n        {shouldDisplayAdmin ? <Admin/> : \n        (<div>\n          <header className=\"App-header\">\n            <img src={Logo} alt=\"\"/>\n          </header>\n          <div className=\"App\">{shouldDisplayCheckInOut ? <CheckInOut currentId={this.state.id}/> : <Form enterClickHandler={this.handleEnterClick.bind(this)}/>}</div>\n        </div>)\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}